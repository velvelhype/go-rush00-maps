package main

import "fmt"
import "piscine"

func output(str string, board [][]string) {
	fmt.Print(str);
	fmt.Println("=========\n");
	for h := 0; h < len(board); h++{ 
		for i := 0; i < len(board[h]); i++{ 
			for j := 0; j < len(board[h][i]); j++{
				fmt.Print(string(board[h][i][j]))
				fmt.Print(" ")
			}
		fmt.Println("")
	}
		piscine.Checkmate(board[h])
		fmt.Println("")
	}
}

func main() {
	fmt.Println("valid maps---------\n");

	pawn_success_maps := [][]string{
		{
		"K.",
		".P",
		},
		{
		"K...",
		".P..",
		"....",
		"....",
		},
		{
		"......",
		"......",
		"..K...",
		"...P..",
		"......",
		"......",
		},
		{
		"........",
		"........",
		"........",
		"...K....",
		"....P...",
		"........",
		"........",
		"........",
		},
	}
	output("pawn_success_maps", pawn_success_maps)

	pawn_SFSFFFFFF := [][]string{
		{
		"K..",
		".P.",
		"...",
		},
		{
		".K.",
		".P.",
		"...",
		},
		{
		"..K",
		".P.",
		"...",
		},
		{
		"...",
		"KP.",
		"...",
		},
		{
		"...",
		".PK",
		"...",
		},
		{
		"...",
		".P.",
		"K..",
		},
		{
		"...",
		".P.",
		".K.",
		},
		{
		"...",
		".P.",
		"..K",
		},
	}
	output("pawn_SFSFFFFFF", pawn_SFSFFFFFF)

	Bishop_success_maps := [][]string{
		{
		"K.",
		".B",
		},
		{
		"K...",
		".B..",
		"....",
		"....",
		},
		{
		"......",
		"......",
		"..K...",
		"...B..",
		"......",
		"......",
		},
		{
		"........",
		"........",
		"........",
		"...K....",
		"....B...",
		"........",
		"........",
		"........",
		},
	}
	output("Bishop_success_maps", Bishop_success_maps)

	Bishop_SFSFFSFS := [][]string{
		{
		"K..",
		".B.",
		"...",
		},
		{
		".K.",
		".B.",
		"...",
		},
		{
		"..K",
		".B.",
		"...",
		},
		{
		"...",
		"KB.",
		"...",
		},
		{
		"...",
		".BK",
		"...",
		},
		{
		"...",
		".B.",
		"K..",
		},
		{
		"...",
		".B.",
		".K.",
		},
		{
		"...",
		".B.",
		"..K",
		},
	}
	output("Bishop_SFSFFSFS", Bishop_SFSFFSFS)

	rook_success_maps := [][]string{
		{
		"K.",
		"R.",
		},
		{
		"K...",
		"R...",
		"....",
		"....",
		},
		{
		"......",
		"......",
		"..K...",
		"..R...",
		"......",
		"......",
		},
		{
		"........",
		"........",
		"........",
		"...K....",
		"...R....",
		"........",
		"........",
		"........",
		},
	}
	output("rook_success_maps", rook_success_maps)
	Rook_FSFSSFSF := [][]string{
		{
		"R..",
		".Q.",
		"...",
		},
		{
		".R.",
		".Q.",
		"...",
		},
		{
		"..R",
		".Q.",
		"...",
		},
		{
		"...",
		"KQ.",
		"...",
		},
		{
		"...",
		".QK",
		"...",
		},
		{
		"...",
		".Q.",
		"R..",
		},
		{
		"...",
		".Q.",
		".R.",
		},
		{
		"...",
		".Q.",
		"..R",
		},
	}
	output("Rook_FSFSSFSF", Rook_FSFSSFSF)
	queen_success_maps := [][]string{
		{
		"K.",
		".Q",
		},
		{
		"K...",
		".Q..",
		"....",
		"....",
		},
		{
		"......",
		"......",
		"..K...",
		"...Q..",
		"......",
		"......",
		},
		{
		"........",
		"........",
		"........",
		"...K....",
		"....Q...",
		"........",
		"........",
		"........",
		},
	}
	output("queen_success_maps", queen_success_maps)

	Queen_SSSSSSSS := [][]string{
		{
		"K..",
		".Q.",
		"...",
		},
		{
		".K.",
		".Q.",
		"...",
		},
		{
		"..K",
		".Q.",
		"...",
		},
		{
		"...",
		"KQ.",
		"...",
		},
		{
		"...",
		".QK",
		"...",
		},
		{
		"...",
		".Q.",
		"K..",
		},
		{
		"...",
		".Q.",
		".K.",
		},
		{
		"...",
		".Q.",
		"..K",
		},
	}
	output("Queen_SSSSSSSS", Queen_SSSSSSSS)

	fmt.Println("//////////////////////////////////////////");
	fmt.Println("invalid maps---------");
	fmt.Println("//////////////////////////////////////////\n");


	empty_maps := [][]string{
		{
		"..",
		"..",
		},
		{
		"....",
		"....",
		"....",
		"....",
		},
		{
		"......",
		"......",
		"......",
		"......",
		"......",
		"......",
		},
		{
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		"..............................",
		},
    }
	output("empty", empty_maps)

	no_string := [][]string{
		{
		},
	}
	output("no_string", no_string)

	invalid_char := [][]string{
		{
		"....",
		".P..",
		"....",
		"....",
		},
	}
	output("invalid_char", invalid_char)

	big_map := [][]string{
		{
		"K.........",
		".P........",
		"..........",
		"..........",
		"..........",
		"..........",
		"..........",
		"..........",
		"..........",
		"..........",
		},
	}
	output("big_map", big_map)

	wrong_width_maps := [][]string{
		{
		"K",
		"P",
		},
		{
		"K...",
		"....",
		"..B.",
		"...",
		},
		{
		".",
		".",
		"..K...",
		"..R...",
		"......",
		"......",
		},
		{
		"",
		"......",
		"..K...",
		"..R...",
		"......",
		"......",
		},
		{
		"......",
		"",
		"..K...",
		"..R...",
		"...",
		"......",
		},
	}
	output("wrong_width_maps", wrong_width_maps)
}
